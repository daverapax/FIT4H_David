Rails bringt die Vorrausetzungen für eine Authentifizierung mit.

Anlegen eines Users

	1. Aktivieren sie in der  Datei 'Gemfile' das Gem 'bcrypt', indem sie das Kommentarzeichen entfernen
	2. Im Model das für die Authentifizierung verwendet wird, in unserem Beispiel 'user', ist die Angabe
		'has_secure_password' nötig.
		damit stehen in diesem Model verschiedene Methoden zur Verschlüsselung und zur Authentifizierung zur Verfügung.
	3. Ein zentrales Attribut in dem Model ist 'password'. Das kann beim Anlegen zu berücksichtigt werden:
			rails g model user email password:digest
		In jedem Fall muss in der Migration für das Feld Attribut die Zeile stehen:
			t.string :password_digest
		Dieser Eintrag sorgt dafür, das in Kombination mit 'has_secure_password' der Passworteintrag in der Tabelle verschlüsselt wird.
	4. Das Formular zum Anlegen eines Users enthält zwei Textfelder für das Passwort:
			:password und :password_confirmation

Authentifizierung:

	Neben dem Model für die Accounts wird ein Controller 'sessions'angelegt, in dem die Authentifizierung statfindet. Der Controller hat eine Action für das Login-Formular (new-Action), eine create-Action für das Überprüfen der Logindaten und eine destroy-Action für das Ausloggen.
	Für die Authentifizierung wird eine Methode von bcrypt (user.authenticate(password)) verwendet.
	Wir haben eine eigene KLassenmethode von User mit dem Namen authenticate geschrieben, die wir im Controller aufrufen:
			def self.authenticate(email, password)
				user = User.find_by(:email => email)
				user && user.authenticate(password)
			end

	Bei einem Fehlschlagen der Authentifizierung wird in das Login-Formular zurückgeleitet. Bei einem erfolgreichen Einloggen wird eine Sessionvariable angelegt.
		session[:user_id] = user.id

	Diese Sessionvariable wird bei jedem Aufruf im Application-Controller überprüft:
		def current_user
			@current_user = User.find(session[:user_id]) if session[:user_id]
		end
		helper_method :current_user

	Beim Logout eines Users wird diese Session zerstört:
		def destroy
			session[:user_id] = nil
		end


Überprüfung der Authentifizierung im Controller
	Um den Zugriff eines Users zu beschränken kann im Controller eine Abfrage durchgeführt werden, ob der User eingeloggt ist.
		def require_sigin
			unless current_user
				redirect_to sigin_url, alert: "Erst einloggen"
			end
		end

	Wenn die Variable (Helper) current_user nicht gefüllt ist, dann bedeutet das, dass der User nicht angemelt ist. Er wird dann zum Loginfenster umgeleitet.

	BSP.:
		Damit nur ein eingeloggter User andere User sehen kann, aber dennnoch das Anlegen eines neuen Users möglich ist, steht im users_controller:
			before_action :require_signin, except: [:new, :create]